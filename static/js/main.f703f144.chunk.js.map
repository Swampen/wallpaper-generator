{"version":3,"sources":["Classes/Ridge.ts","Components/Generator.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["Ridge","Fill","RidgeYStart","Smoodness","Amplitude","NoiceStart","RidgeXStart","this","p5","beginShape","noStroke","fill","vertex","windowHeight","noiceOffset","y","noise","x","windowWidth","endShape","CLOSE","InitialSettings","NumberOfRidges","SpaceBetweenRidges","RidgeColor","MoonXPosition","MoonYPosition","MoonSize","Generator","Settings","setup","canvasParentRef","createCanvas","parent","random","height","gui","QuickSettings","create","bindRange","bindColor","setGlobalChangeHandler","redraw","noLoop","draw","color","red","green","blue","redOffset","greenOffcet","background","ellipse","i","DrawRidge","windowResized","resizeCanvas","App","className","React","Component","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.f703f144.chunk.js","sourcesContent":["import p5Types from \"p5\";\n\nexport class Ridge{\n    Fill: p5Types.Color;\n    RidgeXStart: number;\n    RidgeYStart: number;\n    Smoodness: number;\n    Amplitude: number;\n    NoiceStart: number;\n    \n    constructor(Fill: p5Types.Color, RidgeYStart: number, Smoodness: number, Amplitude: number, NoiceStart: number) {\n        this.Fill = Fill;\n        this.RidgeXStart = 0;\n        this.RidgeYStart = RidgeYStart;\n        this.Smoodness = Smoodness;\n        this.Amplitude = Amplitude;\n        this.NoiceStart = NoiceStart;\n    }\n\n    DrawRidge(p5: p5Types) {\n        p5.beginShape();\n        p5.noStroke();\n        p5.fill(this.Fill);\n        p5.vertex(0, p5.windowHeight);\n        let noiceOffset = this.NoiceStart;\n        let y = this.RidgeYStart - p5.noise(noiceOffset) * this.Amplitude;\n        p5.vertex(0, y)\n        for (let x = 0; x <= p5.windowWidth; x += this.Smoodness) {\n            p5.vertex(x, y);\n            noiceOffset += 0.03;\n            y = this.RidgeYStart - p5.noise(noiceOffset) * this.Amplitude ;\n        }\n        p5.vertex(p5.windowWidth, y);\n        p5.vertex(p5.windowWidth, p5.windowHeight);\n        p5.endShape(p5.CLOSE);\n    }\n}","import React from \"react\";\nimport Sketch from \"react-p5\";\nimport p5Types from \"p5\";\nimport QuickSettings from \"quicksettings\";\nimport { Ridge } from \"../Classes/Ridge\";\n\nclass InitialSettings {\n\tAmplitude = 100;\n\tSmoodness = 5;\n\tNumberOfRidges = 4;\n\tSpaceBetweenRidges = 100;\n\tRidgeColor = \"#732e09\";\n\tMoonXPosition = 0;\n\tMoonYPosition = 0;\n\tMoonSize = 300;\n}\n\nconst Generator: React.FC = () => {\n\tlet Settings = new InitialSettings()\n\n\t//See annotations in JS for more information\n\tconst setup = (p5: p5Types, canvasParentRef: Element) => {\n\t\tp5.createCanvas(p5.windowWidth, p5.windowHeight).parent(canvasParentRef);\n\t\tSettings.MoonXPosition = p5.windowWidth / 10 * p5.random(2, 8)\n\t\tSettings.MoonYPosition = p5.height - Settings.SpaceBetweenRidges * Settings.NumberOfRidges - p5.noise(0) * Settings.Amplitude * 1.5;\n\n\t\tlet gui = QuickSettings.create(20, 20, \"Settings\")\n\t\tgui.bindRange(\"Amplitude\", 0, 300, Settings.Amplitude, 1, Settings);\n\t\tgui.bindRange(\"Smoodness\", 1, 10, Settings.Smoodness, 0.2, Settings);\n\t\tgui.bindRange(\"NumberOfRidges\", 1, 10, Settings.NumberOfRidges, 1, Settings);\n\t\tgui.bindRange(\"SpaceBetweenRidges\", 50, 200, Settings.SpaceBetweenRidges, 1, Settings);\n\t\tgui.bindColor(\"RidgeColor\", \"#732e09\", Settings)\n\t\tgui.bindRange(\"MoonXPosition\", 0, p5.windowWidth, Settings.MoonXPosition, 1, Settings);\n\t\tgui.bindRange(\"MoonYPosition\", 0, p5.windowHeight, Settings.MoonYPosition, 1, Settings);\n\t\tgui.bindRange(\"MoonSize\", 0, 1000, Settings.MoonSize, 1, Settings);\n\t\tgui.setGlobalChangeHandler(() => p5.redraw());\n\n\t\tp5.noLoop()\n\t};\n\n\n\tconst draw = (p5: p5Types) => {\t\t\n\t\tlet color = p5.color(Settings.RidgeColor)\n\t\tlet red = p5.red(color);\n\t\tlet green = p5.green(color);\n\t\tlet blue = p5.blue(color);\n\t\tlet redOffset = 0;\n\t\tlet greenOffcet = 0;\n\n\t\tp5.background(51); \n\t\tp5.fill(230);\n\t\tp5.ellipse(Settings.MoonXPosition, Settings.MoonYPosition, Settings.MoonSize)\n\t\tfor (let i = Settings.NumberOfRidges; i >= 1; i--) {\n\t\t\tlet y = p5.height - Settings.SpaceBetweenRidges * i - 0.3 * Settings.Amplitude;\n\t\t\tlet ridge = new Ridge(p5.color(red+redOffset, green + greenOffcet, blue), y, Settings.Smoodness, Settings.Amplitude, i^(i*10));\n\t\t\tridge.DrawRidge(p5)\n\n\t\t\tredOffset += 30;\n\t\t\tgreenOffcet += 20;\n\t\t}\n\t};\n\n\tconst windowResized = (p5: p5Types) => {\n\t\tp5.resizeCanvas(p5.windowWidth, p5.windowHeight)\n\t}\n\n\treturn (\n\t\t<div>\n\t\t\t<Sketch setup={setup} draw={draw} windowResized={windowResized} />\n\t\t</div>\n\t);\n};\n\nexport default Generator;","import React from 'react';\nimport './App.css';\nimport Generator from \"./Components/Generator\"\n\nexport default class App extends React.Component {\n\n  render() {\n    return (\n      <div className=\"App\">\n        <Generator/>\n      </div>\n    );\n  }\n}","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}