{"version":3,"sources":["Components/Generator.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["Generator","props","Settings","Amplitude","Smoodness","NumberOfRidges","SpaceBetweenRidges","MoonXPosition","MoonYPosition","MoonSize","setup","p5","canvasParentRef","createCanvas","windowWidth","windowHeight","parent","random","height","noise","gui","QuickSettings","create","bindRange","setGlobalChangeHandler","redraw","noLoop","draw","noiceOffset","redOffset","greenOffcet","background","fill","ellipse","i","beginShape","noStroke","vertex","y","x","endShape","App","className","React","Component","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"ySA+EeA,EAvEoB,SAACC,GACnC,IAAIC,EAAW,CACdC,UAAW,IACXC,UAAW,EACXC,eAAgB,EAChBC,mBAAoB,IACpBC,cAAe,EACfC,cAAe,EACfC,SAAU,KAwDX,OACC,8BACC,cAAC,IAAD,CAAQC,MApDI,SAACC,EAAaC,GAC3BD,EAAGE,aAAaF,EAAGG,YAAaH,EAAGI,cAAcC,OAAOJ,GACxDV,EAASK,cAAgBI,EAAGG,YAAc,GAAKH,EAAGM,OAAO,EAAG,GAC5Df,EAASM,cAAgBG,EAAGO,OAAShB,EAASI,mBAAqBJ,EAASG,eAAiBM,EAAGQ,MAAM,GAAKjB,EAASC,UAAY,IAEhI,IAAIiB,EAAMC,IAAcC,OAAO,GAAI,GAAI,YACvCF,EAAIG,UAAU,YAAa,EAAG,IAAKrB,EAASC,UAAW,EAAGD,GAC1DkB,EAAIG,UAAU,YAAa,EAAG,GAAIrB,EAASE,UAAW,EAAGF,GACzDkB,EAAIG,UAAU,iBAAkB,EAAG,GAAIrB,EAASG,eAAgB,EAAGH,GACnEkB,EAAIG,UAAU,qBAAsB,GAAI,IAAKrB,EAASI,mBAAoB,EAAGJ,GAC7EkB,EAAIG,UAAU,gBAAiB,EAAGZ,EAAGG,YAAaZ,EAASK,cAAe,EAAGL,GAC7EkB,EAAIG,UAAU,gBAAiB,EAAGZ,EAAGI,aAAcb,EAASM,cAAe,EAAGN,GAC9EkB,EAAIG,UAAU,WAAY,EAAG,IAAMrB,EAASO,SAAU,EAAGP,GACzDkB,EAAII,wBAAuB,kBAAMb,EAAGc,YAEpCd,EAAGe,UAqCoBC,KAjCX,SAAChB,GACb,IAAIiB,EAAc,EACdC,EAAY,EACZC,EAAc,EAElBnB,EAAGoB,WAAW,IACdpB,EAAGqB,KAAK,KACRrB,EAAGsB,QAAQ/B,EAASK,cAAeL,EAASM,cAAeN,EAASO,UAEpE,IAAK,IAAIyB,EAAIhC,EAASG,eAAgB6B,GAAK,EAAGA,IAAK,CAClDvB,EAAGwB,aACHxB,EAAGyB,WACHzB,EAAG0B,OAAO,EAAG1B,EAAGI,cAChBJ,EAAGqB,KAAK,IAAMH,EAAW,GAAKC,EAAa,GAG3C,IAFA,IAAIQ,EAAI3B,EAAGO,OAAShB,EAASI,mBAAqB4B,EAAIvB,EAAGQ,MAAMS,GAAe1B,EAASC,UAE9EoC,EAAI,EAAGA,GAAK5B,EAAGG,YAAayB,GAAKrC,EAASE,UAClDO,EAAG0B,OAAOE,EAAGD,GACbV,GAAe,IACfU,EAAI3B,EAAGO,OAAShB,EAASI,mBAAqB4B,EAAIvB,EAAGQ,MAAMS,GAAe1B,EAASC,UAGpFQ,EAAG0B,OAAO1B,EAAGG,YAAawB,GAC1B3B,EAAG0B,OAAO1B,EAAGG,YAAaH,EAAGI,cAC7BJ,EAAG6B,WAEHX,GAAa,GACbC,GAAe,UChEGW,E,4JAEnB,WACE,OACE,qBAAKC,UAAU,MAAf,SACE,cAAC,EAAD,U,GALyBC,IAAMC,WCUxBC,EAZS,SAACC,GACnBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCHdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.4e6c336e.chunk.js","sourcesContent":["import React from \"react\";\nimport Sketch from \"react-p5\";\nimport p5Types from \"p5\";\nimport QuickSettings from \"quicksettings\";\n\ninterface Props {\n}\n\nconst Generator: React.FC<Props> = (props: Props) => {\n\tlet Settings = {\n\t\tAmplitude: 100,\n\t\tSmoodness: 5,\n\t\tNumberOfRidges: 4,\n\t\tSpaceBetweenRidges: 100,\n\t\tMoonXPosition: 0,\n\t\tMoonYPosition: 0,\n\t\tMoonSize: 300\n\t}\n\n\t\n\n\t//See annotations in JS for more information\n\tconst setup = (p5: p5Types, canvasParentRef: Element) => {\n\t\tp5.createCanvas(p5.windowWidth, p5.windowHeight).parent(canvasParentRef);\n\t\tSettings.MoonXPosition = p5.windowWidth / 10 * p5.random(2, 8)\n\t\tSettings.MoonYPosition = p5.height - Settings.SpaceBetweenRidges * Settings.NumberOfRidges - p5.noise(0) * Settings.Amplitude * 1.5;\n\n\t\tlet gui = QuickSettings.create(20, 20, \"Settings\")\n\t\tgui.bindRange(\"Amplitude\", 0, 300, Settings.Amplitude, 1, Settings);\n\t\tgui.bindRange(\"Smoodness\", 1, 50, Settings.Smoodness, 1, Settings);\n\t\tgui.bindRange(\"NumberOfRidges\", 1, 10, Settings.NumberOfRidges, 1, Settings);\n\t\tgui.bindRange(\"SpaceBetweenRidges\", 50, 500, Settings.SpaceBetweenRidges, 1, Settings);\n\t\tgui.bindRange(\"MoonXPosition\", 0, p5.windowWidth, Settings.MoonXPosition, 1, Settings);\n\t\tgui.bindRange(\"MoonYPosition\", 0, p5.windowHeight, Settings.MoonYPosition, 1, Settings);\n\t\tgui.bindRange(\"MoonSize\", 0, 1000, Settings.MoonSize, 1, Settings);\n\t\tgui.setGlobalChangeHandler(() => p5.redraw());\n\n\t\tp5.noLoop()\n\t};\n\n\n\tconst draw = (p5: p5Types) => {\t\t\n\t\tlet noiceOffset = 0;\n\t\tlet redOffset = 0;\n\t\tlet greenOffcet = 0;\n\n\t\tp5.background(51); \n\t\tp5.fill(230);\n\t\tp5.ellipse(Settings.MoonXPosition, Settings.MoonYPosition, Settings.MoonSize)\n\n\t\tfor (let i = Settings.NumberOfRidges; i >= 1; i--) {\n\t\t\tp5.beginShape();\n\t\t\tp5.noStroke();\n\t\t\tp5.vertex(0, p5.windowHeight);\n\t\t\tp5.fill(115 + redOffset, 46 + greenOffcet, 9);\n\t\t\tlet y = p5.height - Settings.SpaceBetweenRidges * i - p5.noise(noiceOffset) * Settings.Amplitude;\n\n\t\t\tfor (let x = 0; x <= p5.windowWidth; x += Settings.Smoodness) {\n\t\t\t\tp5.vertex(x, y);\n\t\t\t\tnoiceOffset += 0.03;\n\t\t\t\ty = p5.height - Settings.SpaceBetweenRidges * i - p5.noise(noiceOffset) * Settings.Amplitude;\n\n\t\t\t}\n\t\t\tp5.vertex(p5.windowWidth, y);\n\t\t\tp5.vertex(p5.windowWidth, p5.windowHeight);\n\t\t\tp5.endShape();\n\n\t\t\tredOffset += 30;\n\t\t\tgreenOffcet += 20;\n\t\t}\n\t};\n\n\treturn (\n\t\t<div>\n\t\t\t<Sketch setup={setup} draw={draw} />\n\t\t</div>\n\t);\n};\n\nexport default Generator;","import React from 'react';\nimport './App.css';\nimport Generator from \"./Components/Generator\"\n\nexport default class App extends React.Component {\n\n  render() {\n    return (\n      <div className=\"App\">\n        <Generator/>\n      </div>\n    );\n  }\n}","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}